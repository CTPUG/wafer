name: Django CI

on: [push, pull_request]

jobs:
  postgres:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    name: Postgres - Python ${{ matrix.python-version }}, Django ${{ matrix.django-version }} (Allowed Failures - ${{ matrix.django-version == '3.1.0' || matrix.django-version == 'main' }} )
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        django-version: ['2.2.0', '3.0.0', '3.1.0', 'main']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      continue-on-error: ${{ matrix.django-version == '3.1.0' || matrix.django-version == 'main' }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    - name: 'Install psycopg2 for Django < 3.1'
      # Django < 3.1 is incompatible with psycopg2 2.9
      # See https://github.com/psycopg/psycopg2/issues/1293
      if: "matrix.django-version == '2.2.0' || matrix.django-version == '3.0.0'"
      run: |
        pip install 'psycopg2<2.9'
    - name: 'Install psycopg2'
      if: "matrix.django-version != '2.2.0' && matrix.django-version != '3.0.0'"
      run: |
        pip install psycopg2
    - name: Install Django Release
      run: |
        pip install django~=${{ matrix.django-version }}
      if: matrix.django-version != 'main'
    - name: Install Django Main
      continue-on-error: ${{ matrix.django-version == 'main' }}
      run: |
        pip install 'https://github.com/django/django/archive/main.tar.gz'
      if: matrix.django-version == 'main'
    - name: Run Tests
      continue-on-error: ${{ matrix.django-version == '3.1.0' || matrix.django-version == 'main' }}
      env:
        TESTDB: postgres
      run: |
        NOSE_WITH_COVERAGE=1 NOSE_COVER_PACKAGE=wafer python manage.py test

  sqlite:

    runs-on: ubuntu-latest

    name: SQLite - Python ${{ matrix.python-version }}, Django ${{ matrix.django-version }} (Allowed Failures - ${{ matrix.django-version == '3.1.0' || matrix.django-version == 'main' }} )
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        django-version: ['2.2.0', '3.0.0', '3.1.0', 'main']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      continue-on-error: ${{ matrix.django-version == '3.1.0' || matrix.django-version == 'main' }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    - name: Install Django Release
      run: |
        pip install django~=${{ matrix.django-version }}
      if: matrix.django-version != 'main'
    - name: Install Django Main
      continue-on-error: ${{ matrix.django-version == 'main' }}
      run: |
        pip install 'https://github.com/django/django/archive/main.tar.gz'
      if: matrix.django-version == 'main'
    - name: Run Tests
      continue-on-error: ${{ matrix.django-version == '3.1.0' || matrix.django-version == 'main' }}
      run: |
        NOSE_WITH_COVERAGE=1 NOSE_COVER_PACKAGE=wafer python manage.py test

  translations:
    runs-on: ubuntu-latest
    name: Compile Translations
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
    - name: Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
    - name: Install gettext
      run: |
        sudo apt-get -y install gettext
    - name: Compile Translations
      run: |
        cd wafer
        python ../manage.py compilemessages
