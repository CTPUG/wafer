name: Django CI

on: [push, pull_request]

jobs:
  postgres:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        django-version: ['2.2.0', '3.0.0']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psycopg2
        pip install -r requirements.txt -r requirements-dev.txt
        pip install django~=${{ matrix.django-version }}
    - name: Run Tests
      env:
        TESTDB: postgres
      run: |
        NOSE_WITH_COVERAGE=1 NOSE_COVER_PACKAGE=wafer python manage.py test

  sqlite:

    runs-on: ubuntu-latest

    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        django-version: ['2.2.0', '3.0.0']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        pip install django~=${{ matrix.django-version }}
    - name: Run Tests
      run: |
        NOSE_WITH_COVERAGE=1 NOSE_COVER_PACKAGE=wafer python manage.py test

  # We don't support django 3.1 because some of our dependencies don't, so
  # we track the status as an allowed failure
  # Django master is something we want to track for future breakages, but
  # is never required to succeed.
  allowed-failure-postgres:

    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    continue-on-error: true
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        django-version: ['django~=3.1.0', 'https://github.com/django/django/archive/master.tar.gz']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install psycopg2
        pip install -r requirements.txt -r requirements-dev.txt
        pip install ${{ matrix.django-version }}
    - name: Run Tests
      env:
        TESTDB: postgres
      run: |
        NOSE_WITH_COVERAGE=1 NOSE_COVER_PACKAGE=wafer python manage.py test

  allowed-failure-sqlite:

    runs-on: ubuntu-latest

    continue-on-error: true
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        django-version: ['django~=3.1.0', 'https://github.com/django/django/archive/master.tar.gz']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        pip install ${{ matrix.django-version }}
    - name: Run Tests
      run: |
        NOSE_WITH_COVERAGE=1 NOSE_COVER_PACKAGE=wafer python manage.py test
